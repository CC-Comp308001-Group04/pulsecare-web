# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - test-azure-pipelines

resources:
  - repo: self

variables:
  tag: "$(Build.BuildId)"
  DOCKER_BUILDKIT: 1

stages:
  - stage: Build_try
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        # Define agent to run the pipeline
        pool:
          name: default
        steps:


          - task: NodeTool@0
            inputs:
              versionSource: 'spec'
              versionSpec: '20.x'
              checkLatest: true
          - script: |
              npm install
              npm run build
              npm run test:ci
            displayName: 'Run Tests with Coverage'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*.xml'
              failTaskOnMissingResultsFile: true
          # - script: |
          #     echo "Listing test results..."
          #     dir test-results
          #     echo "Listing coverage results..."
          #     dir coverage
          #   displayName: 'List Test Results and Coverage Files'


          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: 'Cobertura'
              summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
            displayName: 'Publish Code Coverage Results'
 
          # - task: PublishCodeCoverageResults@1
          #   inputs:
          #     codeCoverageTool: 'Cobertura'
          #     summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml' # the location of the coverage summary file
          #     reportDirectory: '$(System.DefaultWorkingDirectory)/coverage' # the directory where detailed coverage reports are
          #     failIfCoverageEmpty: true # optional: fail the pipeline if no coverage data is found
          
          # - task: SonarQubePrepare@5
          #   inputs:
          #     SonarQube: 'Joe_local_sonar'
          #     scannerMode: 'CLI'
          #     configMode: 'file'
          # - task: SonarQubePrepare@5
          #   inputs:
          #     SonarQube: 'Joe_local_sonar'
          #     scannerMode: 'CLI'
          #     configMode: 'manual'
          #     cliProjectKey: 'PulseCare-webApp_PulseCare-webApp_30d57032-9f5a-4646-9f12-43d4abc077c5'
          #     cliSources: '.'
          # - task: SonarQubeAnalyze@5
          #   inputs:
          #     jdkversion: 'JAVA_HOME_17_X64'

          # - task: SonarQubePublish@5
          #   inputs:
          #     pollingTimeoutSec: '300'
            
          
          # - task: DockerCompose@0
          #   inputs:
          #     containerregistrytype: "Container Registry"
          #     dockerRegistryEndpoint: "Github Container Registry"
          #     dockerComposeFile: "docker/docker-compose.yml"
          #     action: "Build services"
          #     additionalImageTags: $(Build.BuildId)
          #     includeLatestTag: true


          # - task: Docker@2
          #   displayName: Build an image
          #   inputs:
          #     containerRegistry: "Github Container Registry"
          #     repository: ghrc.io/CC-Comp308001-Group04/pulsecare-web
          #     command: "build"
          #     Dockerfile: "docker/Dockerfile"
          #     buildContext: "."

          #     tags: "$(tag)"
          #     arguments: "--target=production --build-arg DATABASE_URL=$(DATABASE_URL) --build-arg AUTH_URL=$(AUTH_URL) --build-arg AUTH_SECRET=$(AUTH_SECRET) --build-arg AUTH_GOOGLE_ID=$(AUTH_GOOGLE_ID) --build-arg AUTH_GOOGLE_SECRET=$(AUTH_GOOGLE_SECRET)"
          # - task: Docker@2
          #   displayName: Push an image
          #   inputs:
          #     containerRegistry: "Github Container Registry"
          #     repository: ghrc.io/CC-Comp308001-Group04/pulsecare-web
          #     command: "push"
          #     Dockerfile: "docker/Dockerfile"
          #     tags: "$(tag)"
          #     arguments: ""


        # # - task: Docker@2
        # #   inputs:
        # #     containerRegistry: 'Github Container Registry'
        # #     repository: 'pulsecare-web'
        # #     command: 'push'
        # # - task: DockerCompose@0
        # #   inputs:
        # #     containerregistrytype: 'Container Registry'
        # #     dockerRegistryEndpoint: 'Github Container Registry'
        # #     dockerComposeFile: '**/docker/docker-compose.yml'
        # #     action: 'Run a Docker Compose command'
        # #     arguments: '--profile=prod'
