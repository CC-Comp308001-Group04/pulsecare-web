# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:
  tag: "$(Build.BuildId)"
  DOCKER_BUILDKIT: 1
pool:
  name: default
stages:
  - stage: Build
    displayName: Build image
    jobs:
      - job: Build
        displayName: Build
        # Define agent to run the pipeline

        steps:
          - task: NodeTool@0
            inputs:
              versionSource: "spec"
              versionSpec: "20.x"
              checkLatest: true

          - script: |
              npm install

            displayName: "Run Install"
          - script: |
              npm run test:ci
            displayName: "Run Tests with Coverage"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: junit.xml
              searchFolder: "$(System.DefaultWorkingDirectory)"
              failTaskOnMissingResultsFile: true

          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"
            displayName: "Publish Code Coverage Results"

          # - task: DockerCompose@0
          #   inputs:
          #     containerregistrytype: "Container Registry"
          #     dockerRegistryEndpoint: "Github Container Registry"
          #     dockerComposeFile: "docker/docker-compose.yml"
          #     action: "Build services"
          #     additionalImageTags: $(Build.BuildId)
          #     includeLatestTag: true
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: "Joe_local_sonar"
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: "PulseCare-webApp_PulseCare-webApp_30d57032-9f5a-4646-9f12-43d4abc077c5"
              cliSources: "."
          - task: SonarQubeAnalyze@5
            inputs:
              jdkversion: "JAVA_HOME"
          - task: Docker@2
            displayName: Build an image
            inputs:
              containerRegistry: "Github Container Registry"
              repository: ghrc.io/CC-Comp308001-Group04/pulsecare-web
              command: "build"
              Dockerfile: "docker/Dockerfile"
              buildContext: "."

              tags: "$(tag)"
              arguments: "--target=production --build-arg DATABASE_URL=$(DATABASE_URL) --build-arg AUTH_URL=$(AUTH_URL) --build-arg AUTH_SECRET=$(AUTH_SECRET) --build-arg AUTH_GOOGLE_ID=$(AUTH_GOOGLE_ID) --build-arg AUTH_GOOGLE_SECRET=$(AUTH_GOOGLE_SECRET)"

          - task: Docker@2
            displayName: Push an image
            inputs:
              containerRegistry: "Github Container Registry"
              repository: ghrc.io/CC-Comp308001-Group04/pulsecare-web
              command: "push"
              Dockerfile: "docker/Dockerfile"
              tags: "$(tag)"
              arguments: ""

        # # - task: Docker@2
        # #   inputs:
        # #     containerRegistry: 'Github Container Registry'
        # #     repository: 'pulsecare-web'
        # #     command: 'push'
        # # - task: DockerCompose@0
        # #   inputs:
        # #     containerregistrytype: 'Container Registry'
        # #     dockerRegistryEndpoint: 'Github Container Registry'
        # #     dockerComposeFile: '**/docker/docker-compose.yml'
        # #     action: 'Run a Docker Compose command'
        # #     arguments: '--profile=prod'

  - stage: deployToDev
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        # creates an environment if it doesn't exist
        environment:
          name: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo Hello world

  - stage: deployToUat
    dependsOn: deployToDev
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        # creates an environment if it doesn't exist
        environment:
          name: "PulseCare-UAT"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo Hello world

  - stage: DeployToStaging
    dependsOn: deployToUat
    condition: succeeded()
    jobs:
      - job: DeployStaging
        steps:
          - script: echo "Deploying to Staging environment (mock step)"
            displayName: "Deploy to Staging Environment"

  - stage: DeployToProduction
    dependsOn: DeployToStaging
    condition: succeeded()
    jobs:
      - job: DeployProduction
        steps:
          - script: echo "Deploying to Production environment (mock step)"
            displayName: "Deploy to Production Environment"
