# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
  - master

resources:
  - repo: self

variables:
  tag: "$(Build.BuildId)"
  DOCKER_BUILDKIT: 1
  PNPM_CACHE_FOLDER: $(Pipeline.Workspace)/.pnpm-store
  NEXT_TELEMETRY_DISABLED: "1"
  node_version: ^18.17.0

pool:
  name: default

stages:
  - stage: Test
    jobs:
      - job: Test
        displayName: Test
        timeoutInMinutes: "10"
        # Define agent to run the pipeline

        steps:
          - task: NodeTool@0
            inputs:
              versionSpec: $(node_version)
            displayName: "Install Node.js"

          - script: corepack enable
            displayName: "Enable Corepack"

          - script: pnpm config set store-dir $(PNPM_CACHE_FOLDER)
            displayName: "Set PNPM cache directory"

          - script: pnpm store path
            displayName: "Show store path"

          - script: pnpm install && pnpm dlx prisma generate && pnpm run build
            displayName: "Install and build (with Prisma Client)"

          - script: |
              pnpm run test:ci
            displayName: "Run tests and Generate coverage"

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: junit.xml
              searchFolder: "$(System.DefaultWorkingDirectory)"
              failTaskOnMissingResultsFile: true

          - task: PublishCodeCoverageResults@1
            condition: succeededOrFailed()
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml"
            displayName: "Publish Code Coverage Results"

          # - task: DockerCompose@0
          #   inputs:
          #     containerregistrytype: "Container Registry"
          #     dockerRegistryEndpoint: "Github Container Registry"
          #     dockerComposeFile: "docker/docker-compose.yml"
          #     action: "Build services"
          #     additionalImageTags: $(Build.BuildId)
          #     includeLatestTag: true
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: "Joe_local_sonar"
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: "PulseCare-webApp_PulseCare-webApp_30d57032-9f5a-4646-9f12-43d4abc077c5"
              cliSources: "."
            continueOnError: true

          - task: SonarQubeAnalyze@5
            inputs:
              jdkversion: "JAVA_HOME"
            continueOnError: true

          - script: echo $(Build.ArtifactStagingDirectory)
            displayName: "Debug"

  - stage: Build
    jobs:
      - job: Build
        displayName: Build
        # Define agent to run the pipeline

        steps:
          - task: Docker@2
            displayName: Build Image
            inputs:
              containerRegistry: "Github Container Registry"
              repository: CC-Comp308001-Group04/pulsecare-web
              command: "build"
              Dockerfile: "docker/Dockerfile"
              buildContext: "."

              tags: "$(tag)"
              arguments: "--target=runner --build-arg DATABASE_URL=$(DATABASE_URL) --build-arg AUTH_SECRET=$(AUTH_SECRET) --build-arg AUTH_GOOGLE_ID=$(AUTH_GOOGLE_ID) --build-arg AUTH_GOOGLE_SECRET=$(AUTH_GOOGLE_SECRET)"

          - script: dir $(Pipeline.Workspace)
            displayName: "List Files in Workspace"

          - task: Docker@2
            displayName: Push an image
            inputs:
              containerRegistry: "Github Container Registry"
              repository: CC-Comp308001-Group04/pulsecare-web
              command: "push"
              Dockerfile: "docker/Dockerfile"
              tags: "$(tag)"

          - script: dir $(Pipeline.Workspace)
            displayName: "List Files in Workspace"

  - stage: DEV
    jobs:
      - job: Deploy_to_Dev
        displayName: Download Artifact
        steps:
          - task: Docker@2
            displayName: Pull the image
            inputs:
              containerRegistry: "Github Container Registry"

              command: "pull"
              arguments: ghcr.io/cc-comp308001-group04/pulsecare-web:$(tag)

          - script: dir $(Pipeline.Workspace)
            displayName: "List Files in Workspace"

      - deployment: DeployWeb

        dependsOn: Deploy_to_Dev
        displayName: deploy Web App
        # creates an environment if it doesn't exist
        environment:
          name: "dev"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo Hello world

  - stage: QAT
    dependsOn: DEV
    jobs:
      - deployment: DeployWeb
        displayName: deploy Web App
        # creates an environment if it doesn't exist
        environment:
          name: "PulseCare-UAT"
        strategy:
          runOnce:
            deploy:
              steps:
                - script: echo Hello world

  - stage: STAGING
    dependsOn: QAT
    condition: succeeded()
    jobs:
      - job: DeployStaging
        steps:
          - script: echo "Deploying to Staging environment (mock step)"
            displayName: "Deploy to Staging Environment"

  - stage: PROD
    dependsOn: STAGING
    condition: succeeded()
    jobs:
      - job: DeployProduction
        steps:
          - script: echo "Deploying to Production environment (mock step)"
            displayName: "Deploy to Production Environment"
