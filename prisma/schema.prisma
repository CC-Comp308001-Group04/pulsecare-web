datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  role          String          @default("patient")
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  dateOfBirth   DateTime?       @map("date_of_birth")
  sex           String?
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  credentialID         String  @unique
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MedicalRecord {
  id                            String    @id @default(auto()) @map("_id") @db.ObjectId
  patientId                     String    @db.ObjectId
  chestPain                     Int?      @map("cp") // Chest pain type: 1, 2, 3, 4
  restingBloodPressure          Int?      @map("trestbps") // Resting blood pressure in mm Hg
  cholesterol                   Int?      @map("chol") // Serum cholesterol in mg/dl
  fastingBloodSugar             Boolean?  @map("fbs") // Fasting blood sugar: 1 for true, 0 for false
  restingElectrocardio          Int?  @map("restecg") // Resting electrocardiographic results: 0, 1, 2
  maxHeartRate                  Int?      @map("thalach") // Maximum heart rate achieved
  exerciseInduced               Boolean?  @map("exang") // Exercise induced angina: 1 for yes, 0 for no
  stDepressionInducedByExercise Float?    @map("oldepeak") // ST depression induced by exercise relative to rest
  slope                         Int?      @map("slope") // Slope of the peak exercise ST segment: 1, 2, 3
  vesselsColoredByFluoroscopy   Float?    @map("ca") // Number of major vessels colored by fluoroscopy
  thalliumStressTest            Float?    @map("thal") // Thallium stress test result: 3, 6, 7
  hasHeartDisease               Boolean?  @map("num") // Presence of heart disease: 0 for no, 1 for yes
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime? @updatedAt
  patient                       User?     @relation(fields: [patientId], references: [id], onDelete: Cascade)
}

enum Role {
  patient
  nurse
}
